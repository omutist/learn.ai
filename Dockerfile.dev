# Use a slim Python base image
FROM python:3.12.11-slim-bookworm

# Set working directory
WORKDIR /workspace

# Install git (if needed) and other system deps
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
       git build-essential python3-dev docker.io \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
RUN pip install --upgrade pip setuptools wheel pip-tools
COPY pyproject.toml .
RUN mkdir code \
    && pip-compile pyproject.toml --output-file=requirements.txt --strip-extras --verbose \
    && pip install --no-cache-dir --root-user-action=ignore -r requirements.txt \
    && rm requirements.txt 

# Add useful shell aliases
RUN git config --global --add safe.directory /workspace \
    && echo "alias ll='ls -la'" >> /etc/bash.bashrc
# Note: this alias is added inside the container image; your host shell remains unaffected

# Add Docker's official GPG key and repository for Debian-based systems.
# This allows installation of Docker packages  
# from Docker's own repository instead of the default system packages.
RUN apt-get update && \
    apt-get install -y ca-certificates curl gnupg && \
    install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    chmod a+r /etc/apt/keyrings/docker.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
    bookworm stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update

# Install Docker Compose plugin
RUN apt-get install -y docker-compose-plugin less

# Default command: drop to bash for manual script runs
CMD ["bash"]